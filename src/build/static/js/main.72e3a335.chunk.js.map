{"version":3,"sources":["services/api.ts","pages/CurrentProgram.tsx","pages/Schedule.tsx","pages/NoSchedule.tsx","pages/ScheduleCell.tsx","routes.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","CurrentProgram","Days","Months","props","currentProgram","className","title","human_start_time","human_end_time","src","custom_info","Graficos","ImagemURL","alt","NoSchedule","ScheduleCell","program","active","console","log","style","backgroundColor","LogoURL","substr","Schedule","useState","programs","setPrograms","date","Date","currentDate","getDate","currentMonth","getMonth","currentYear","getFullYear","toISOString","todayDateToString","setDate","setCurrentProgram","setCurrentDate","useEffect","get","toString","then","response","fixedUTCPrograms","map","newProgram","startTime","toTimeString","endTime","fixProgramTimeToUTC","data","programme","entries","hora","forEach","parse","handleProgram","catch","error","selectedDate","id","type","name","value","onChange","e","target","length","getDay","media_id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","href","rel","document","getElementById"],"mappings":"0TAIeA,E,OAHHC,EAAMC,OAAO,CACvBC,QAAS,mD,qBC+BIC,ICVVC,EAUAC,EDAUF,EAdf,SAAwBG,GAAqC,IACpDC,EAAkBD,EAAlBC,eACP,OACE,sBAAKC,UAAU,oBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,8DAAoBD,QAApB,IAAoBA,OAApB,EAAoBA,EAAgBE,SACpC,uBACA,4CAAQF,QAAR,IAAQA,OAAR,EAAQA,EAAgBG,iBAAxB,iBAA8CH,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAgBI,eAA9D,UAEF,qBAAKC,IAAKL,EAAeM,YAAYC,SAASC,UAAWC,IAAI,aEdpDC,G,MAVI,WACjB,OACE,qBAAKT,UAAU,wBAAf,SACE,8FC0CSU,G,MA/BM,SAACZ,GAAiD,IAC7Da,EAAoBb,EAApBa,QAASC,EAAWd,EAAXc,OAEjB,OADAC,QAAQC,IAAIF,GAETA,EAWG,sBAAKZ,UAAU,gBAAgBe,MAAO,CAACC,gBAAgB,eAAvD,UACA,qBAAKZ,IAAKO,EAAQN,YAAYC,SAASW,QAAST,IAAI,SACpD,sBAAKR,UAAU,qBAAf,UACE,mCAAMW,EAAQV,MAAd,OACE,qBAAKD,UAAU,uBAAf,SACE,6CAAgBW,EAAQT,iBAAiBgB,OAAO,EAAG,GAAnD,WAA4DP,EAAQR,eAAee,OAAO,EAAG,GAA7F,YAIH,sBAAMlB,UAAU,gBAAhB,wBAnBH,sBAAKA,UAAU,gBAAf,UACE,qBAAKI,IAAKO,EAAQN,YAAYC,SAASW,QAAST,IAAI,SACpD,sBAAKR,UAAU,qBAAf,UACE,mCAAMW,EAAQV,MAAd,OACE,6CAAgBU,EAAQT,iBAAiBgB,OAAO,EAAG,GAAnD,WAA4DP,EAAQR,eAAee,OAAO,EAAG,GAA7F,gB,SFJTtB,O,qBAAAA,I,qBAAAA,I,0BAAAA,I,mBAAAA,I,mBAAAA,I,iBAAAA,I,oBAAAA,M,cAUAC,O,qBAAAA,I,yBAAAA,I,0BAAAA,I,iBAAAA,I,eAAAA,I,iBAAAA,I,iBAAAA,I,mBAAAA,I,uBAAAA,I,qBAAAA,I,wBAAAA,I,yBAAAA,M,KA8FUsB,MA9Cf,WAAqB,IAAD,EACcC,mBAAqB,IADnC,mBACXC,EADW,KACDC,EADC,OAEMF,mBAtBA,WACxB,IAAMG,EAAO,IAAIC,KACXC,EAAcF,EAAKG,UACpBC,EAAeJ,EAAKK,WAAa,EAChCC,EAAcN,EAAKO,cACzB,OAAO,IAAIN,KAAJ,UAAYK,EAAc,IAAMF,EAAe,IAAMF,EAArD,cAA6EM,cAAcb,OAAO,EAAG,IAiB3Ec,IAFf,mBAEXT,EAFW,KAELU,EAFK,OAG0Bb,qBAH1B,mBAGXrB,EAHW,KAGKmC,EAHL,OAIoBd,mBAAS,IAAII,MAJjC,mBAIXC,EAJW,KAIEU,EAJF,KAmBlB,OAbAC,qBAAU,WAER7C,EAAI8C,IAAKd,EAAKe,YAAaC,MAAK,SAAAC,GAAa,IAErCC,EAtBgB,SAACpB,GAU3B,OARgBA,EAASqB,KAAI,SAAA/B,GAC3B,IAAIgC,EAAahC,EACbiC,EAAY,IAAIpB,KAAJ,qBAAuBb,EAAQT,iBAAiBgB,OAAO,EAAE,GAAzD,SAAmE2B,eAAe3B,OAAO,EAAE,GAC3GyB,EAAWzC,iBAAmB0C,EAC9B,IAAIE,EAAU,IAAItB,KAAJ,qBAAuBb,EAAQR,eAAee,OAAO,EAAE,GAAvD,SAAiE2B,eAAe3B,OAAO,EAAE,GAEvG,OADAyB,EAAWxC,eAAiB2C,EACrBH,KAcoBI,CADLP,EAASQ,KAAKC,UAA1BC,SAER5B,EAAYmB,GACZP,EA7CN,SAAuBb,GACrB,IACItB,EADEoD,GAAO,IAAI3B,MAAOqB,eAAe3B,OAAO,EAAE,GAShD,OAPAG,EAAS+B,SAAQ,SAAAzC,GACXa,KAAK6B,MAAL,qBAAyB1C,EAAQT,oBAAuBsB,KAAK6B,MAAL,qBAAyBF,KAChF3B,KAAK6B,MAAL,qBAAyB1C,EAAQR,iBAAoBqB,KAAK6B,MAAL,qBAAyBF,MAEjFpD,EAAiBY,MAGdZ,EAmCeuD,CAAcb,OAC/Bc,OAAM,SAAAC,GACLlC,EAAY,OAEhB,IAAImC,EAAe,IAAIjC,KAAJ,UAAaD,EAAKe,WAAlB,cACnBH,EAAesB,KACd,CAAClC,IAEF,qBAAKmC,GAAG,0BAAR,SACE,+BACE,sBAAK1D,UAAU,gBAAf,UACI,sBAAKA,UAAU,cAAf,UACA,uFAGA,uBAAO2D,KAAK,OAAOC,KAAK,OAAOF,GAAG,OAAOG,MAAOtC,EAAOuC,SAAU,SAACC,GAAD,OAAK9B,EAAQ8B,EAAEC,OAAOH,aAEpE,IAApBxC,EAAS4C,OACV,qCACClE,GAAkB,cAAC,EAAD,CAAgBA,eAAgBA,IACnD,qCACE,2DAAwBH,EAAK6B,EAAYyC,UAAzC,KAAsDzC,EAAYC,UAAlE,IAA+E7B,EAAO4B,EAAYG,eAC7FP,GAAYA,EAASqB,KAAI,SAAA/B,GAAO,OAAI,cAAC,EAAD,CAAcA,QAASA,EAASC,QAAsB,OAAdb,QAAc,IAAdA,OAAA,EAAAA,EAAgBoE,YAAWxD,EAAQwD,oBAKpH,cAAC,EAAD,YGzGGC,MAXf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpD,S,MCI1BqD,MANf,WACE,OACE,cAAC,EAAD,K,MCJJC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,sBAAMC,KAAK,0CAA0CC,IAAI,eACzD,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.72e3a335.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst api = axios.create({\r\n  baseURL: 'https://programacaorpc.herokuapp.com/schedule/',\r\n})\r\nexport default api","import React from 'react'\r\n\r\nimport '../styles/CurrentProgram.css'\r\n\r\ninterface  Program{\r\n  \"media_id\": number,\r\n  \"title\": string,\r\n  \"description\": string,\r\n  \"human_start_time\": string,\r\n  \"human_end_time\": string,\r\n  \"custom_info\": {\r\n      \"Graficos\": {\r\n          \"ImagemURL\": string,\r\n          \"LogoURL\": string,\r\n      },\r\n      \"Tipo\": string,\r\n  }\r\n}\r\n\r\nfunction CurrentProgram(props: { currentProgram: Program }) {\r\n  const {currentProgram} = props\r\n  return (\r\n    <div className=\"current-container\">\r\n      <div className=\"current-program\">\r\n        <span>Em exibição: {currentProgram?.title}</span>\r\n        <br/>\r\n        <span>({currentProgram?.human_start_time} às {currentProgram?.human_end_time})</span>\r\n      </div>\r\n      <img src={currentProgram.custom_info.Graficos.ImagemURL} alt=\"logo\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrentProgram;\r\n","import React, { useEffect, useState } from 'react'\r\nimport api from '../services/api'\r\nimport '../styles/ProgramList.css'\r\nimport CurrentProgram from './CurrentProgram'\r\nimport NoSchedule from './NoSchedule'\r\nimport ScheduleCell from './ScheduleCell'\r\n\r\n\r\ninterface  Programs{\r\n  \"media_id\": number,\r\n  \"title\": string,\r\n  \"description\": string,\r\n  \"human_start_time\": string,\r\n  \"human_end_time\": string,\r\n  \"custom_info\": {\r\n      \"Graficos\": {\r\n          \"ImagemURL\": string,\r\n          \"LogoURL\": string,\r\n      },\r\n      \"Tipo\": string,\r\n  }\r\n}\r\n\r\nenum Days{\r\n  Domingo,\r\n  Segunda,\r\n  Terça,\r\n  Quarta,\r\n  Quinta,\r\n  Sexta,\r\n  Sabado,\r\n}\r\n\r\nenum Months{\r\n  Janeiro,\r\n  Fevereiro,\r\n  Março,\r\n  Abril,\r\n  Maio,\r\n  Junho,\r\n  Julho,\r\n  Agosto,\r\n  Setembro,\r\n  Outubro,\r\n  Novembro,\r\n  Dezembro\r\n}\r\n\r\nfunction handleProgram(programs: Programs[]) {\r\n  const hora = new Date().toTimeString().substr(0,8)\r\n  let currentProgram;\r\n  programs.forEach(program => {\r\n    if (Date.parse(`01/01/2011 ${program.human_start_time}`) <= Date.parse(`01/01/2011 ${hora}`)\r\n      && Date.parse(`01/01/2011 ${program.human_end_time}`) > Date.parse(`01/01/2011 ${hora}`))\r\n    {\r\n      currentProgram = program\r\n      }\r\n  })\r\n  return currentProgram\r\n}\r\n\r\nconst todayDateToString = () => {\r\n  const date = new Date()\r\n  const currentDate = date.getDate()\r\n\tconst currentMonth = date.getMonth() + 1\r\n  const currentYear = date.getFullYear()\r\n  return new Date(`${currentYear + \"-\" + currentMonth + \"-\" + currentDate} 00:00:00`).toISOString().substr(0, 10)\r\n}\r\n\r\nconst fixProgramTimeToUTC = (programs: Programs[]) => {\r\n\r\n  const newList = programs.map(program => {\r\n    let newProgram = program\r\n    let startTime = new Date(`2021-01-01 ${program.human_start_time.substr(0,5)} UTC`).toTimeString().substr(0,5)\r\n    newProgram.human_start_time = startTime\r\n    let endTime = new Date(`2021-01-01 ${program.human_end_time.substr(0,5)} UTC`).toTimeString().substr(0,5)\r\n    newProgram.human_end_time = endTime\r\n    return newProgram\r\n  })\r\n  return newList\r\n}\r\nfunction Schedule() {\r\n  const [programs, setPrograms] = useState<Programs[]>([])\r\n  const [date, setDate] = useState(todayDateToString())\r\n  const [currentProgram, setCurrentProgram] = useState<Programs>()\r\n  const [currentDate, setCurrentDate] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n\r\n    api.get( date.toString() ).then(response => {\r\n      const { entries } = response.data.programme\r\n      const fixedUTCPrograms = fixProgramTimeToUTC(entries)\r\n      setPrograms(fixedUTCPrograms)\r\n      setCurrentProgram(handleProgram(fixedUTCPrograms))\r\n    }).catch(error => {\r\n        setPrograms([])\r\n    })\r\n    let selectedDate = new Date(`${ date.toString()} 00:00:00`)\r\n    setCurrentDate(selectedDate)\r\n  }, [date])\r\n  return (\r\n    <div id=\"page-schedule-container\">\r\n      <main>\r\n        <div className=\"page-schedule\">\r\n            <div className=\"date-picker\">\r\n            <span>\r\n              Selecione outro dia para ver sua programação.\r\n            </span>\r\n            <input type=\"date\" name=\"data\" id=\"data\" value={date}  onChange={(e)=>setDate(e.target.value)} />\r\n          </div>\r\n          {programs.length !== 0 ? (\r\n          <>\r\n          {currentProgram && <CurrentProgram currentProgram={currentProgram}/>}\r\n          <fieldset>\r\n            <legend>Programação de {Days[currentDate.getDay()]}, {currentDate.getDate()} { Months[currentDate.getMonth()] }</legend>\r\n                {programs && programs.map(program => <ScheduleCell program={program} active={currentProgram?.media_id===program.media_id}/>)}\r\n\r\n              </fieldset>\r\n          </>\r\n          )\r\n          : <NoSchedule/>}\r\n\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\nexport default Schedule","import React from 'react'\r\n\r\nimport '../styles/NoSchedule.css'\r\n\r\nconst NoSchedule = () => {\r\n  return (\r\n    <div className=\"no-schedule-container\">\r\n      <span>\r\n        Sem programação disponivel, selecione outro dia.\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoSchedule","import React from 'react'\r\n\r\nimport '../styles/ScheduleCell.css'\r\n\r\ninterface  Program{\r\n  \"media_id\": number,\r\n  \"title\": string,\r\n  \"description\": string,\r\n  \"human_start_time\": string,\r\n  \"human_end_time\": string,\r\n  \"custom_info\": {\r\n      \"Graficos\": {\r\n          \"ImagemURL\": string,\r\n          \"LogoURL\": string,\r\n      },\r\n      \"Tipo\": string,\r\n  }\r\n}\r\nconst ScheduleCell = (props: { program: Program, active:boolean }) => {\r\n  const { program, active } = props\r\n  console.log(active)\r\n  return (\r\n    !active ? (\r\n        <div className=\"schedule-cell\">\r\n          <img src={program.custom_info.Graficos.LogoURL} alt=\"logo\" />\r\n          <div className=\"schedule-cell-text\">\r\n            <h4> {program.title} </h4>\r\n              <span>Horario: {program.human_start_time.substr(0, 5)} até {program.human_end_time.substr(0, 5)} </span>\r\n          </div>\r\n        </div>\r\n      )\r\n      :\r\n      (\r\n        <div className=\"schedule-cell\" style={{backgroundColor:'lightyellow'}}>\r\n        <img src={program.custom_info.Graficos.LogoURL} alt=\"logo\" />\r\n        <div className=\"schedule-cell-text\">\r\n          <h4> {program.title} </h4>\r\n            <div className=\"current-program-cell\">\r\n              <span>Horario: {program.human_start_time.substr(0, 5)} até {program.human_end_time.substr(0, 5)} </span>\r\n\r\n            </div>\r\n          </div>\r\n           <span className=\"current-alert\">No ar! </span>\r\n        </div>\r\n      )\r\n\r\n  )\r\n}\r\n\r\nexport default ScheduleCell","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport Schedule from './pages/Schedule';\r\n\r\nfunction Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Schedule}/>\r\n\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes","import React from 'react';\nimport Routes from './routes';\n\n\nimport './styles/Global.css'\n\nfunction App() {\n  return (\n    <Routes/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.sass'\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"../node_modules/bulma/css/bulma.min.css\" rel=\"stylesheet\"/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}